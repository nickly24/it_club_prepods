{"ast":null,"code":"var _jsxFileName = \"/Users/nickly/Desktop/\\u041F\\u0440\\u043E\\u0433\\u0430/project7/client/src/analytics/ProfitChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Chart, registerables } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst monthNames = {\n  '01': 'Январь',\n  '02': 'Февраль',\n  '03': 'Март',\n  '04': 'Апрель',\n  '05': 'Май',\n  '06': 'Июнь',\n  '07': 'Июль',\n  '08': 'Август',\n  '09': 'Сентябрь',\n  '10': 'Октябрь',\n  '11': 'Ноябрь',\n  '12': 'Декабрь'\n};\nconst ProfitChart = ({\n  data\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n    const chartData = {\n      labels: data.map(monthData => monthNames[monthData.month.split('-')[1]]),\n      datasets: [{\n        label: 'Прибыль',\n        data: data.map(monthData => monthData.profit),\n        backgroundColor: 'rgba(75, 192, 192, 0.6)'\n      }]\n    };\n    const ctx = canvasRef.current.getContext('2d');\n    chartRef.current = new Chart(ctx, {\n      type: 'bar',\n      data: chartData,\n      options: {\n        scales: {\n          x: {\n            type: 'category'\n          },\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n    return () => {\n      if (chartRef.current) {\n        chartRef.current.destroy();\n      }\n    };\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    id: \"profitChart\",\n    className: \"chart mt20\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 10\n  }, this);\n};\n_s(ProfitChart, \"INC2sQwyd6LmrwJnmQblTTo+H+w=\");\n_c = ProfitChart;\nexport default ProfitChart;\nvar _c;\n$RefreshReg$(_c, \"ProfitChart\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","registerables","jsxDEV","_jsxDEV","register","monthNames","ProfitChart","data","_s","chartRef","canvasRef","current","destroy","chartData","labels","map","monthData","month","split","datasets","label","profit","backgroundColor","ctx","getContext","type","options","scales","x","y","beginAtZero","ref","id","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nickly/Desktop/Прога/project7/client/src/analytics/ProfitChart.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Chart, registerables } from 'chart.js';\n\nChart.register(...registerables);\n\nconst monthNames = {\n  '01': 'Январь',\n  '02': 'Февраль',\n  '03': 'Март',\n  '04': 'Апрель',\n  '05': 'Май',\n  '06': 'Июнь',\n  '07': 'Июль',\n  '08': 'Август',\n  '09': 'Сентябрь',\n  '10': 'Октябрь',\n  '11': 'Ноябрь',\n  '12': 'Декабрь',\n};\n\nconst ProfitChart = ({ data }) => {\n  const chartRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n\n    const chartData = {\n      labels: data.map(monthData => monthNames[monthData.month.split('-')[1]]),\n      datasets: [\n        {\n          label: 'Прибыль',\n          data: data.map(monthData => monthData.profit),\n          backgroundColor: 'rgba(75, 192, 192, 0.6)',\n        },\n      ],\n    };\n\n    const ctx = canvasRef.current.getContext('2d');\n    chartRef.current = new Chart(ctx, {\n      type: 'bar',\n      data: chartData,\n      options: {\n        scales: {\n          x: {\n            type: 'category',\n          },\n          y: {\n            beginAtZero: true,\n          },\n        },\n      },\n    });\n\n    return () => {\n      if (chartRef.current) {\n        chartRef.current.destroy();\n      }\n    };\n  }, [data]);\n\n  return <canvas ref={canvasRef} id=\"profitChart\" className='chart mt20'></canvas>;\n};\n\nexport default ProfitChart;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,KAAK,EAAEC,aAAa,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhDH,KAAK,CAACI,QAAQ,CAAC,GAAGH,aAAa,CAAC;AAEhC,MAAMI,UAAU,GAAG;EACjB,IAAI,EAAE,QAAQ;EACd,IAAI,EAAE,SAAS;EACf,IAAI,EAAE,MAAM;EACZ,IAAI,EAAE,QAAQ;EACd,IAAI,EAAE,KAAK;EACX,IAAI,EAAE,MAAM;EACZ,IAAI,EAAE,MAAM;EACZ,IAAI,EAAE,QAAQ;EACd,IAAI,EAAE,UAAU;EAChB,IAAI,EAAE,SAAS;EACf,IAAI,EAAE,QAAQ;EACd,IAAI,EAAE;AACR,CAAC;AAED,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAChC,MAAMC,QAAQ,GAAGV,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMW,SAAS,GAAGX,MAAM,CAAC,IAAI,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd,IAAIW,QAAQ,CAACE,OAAO,EAAE;MACpBF,QAAQ,CAACE,OAAO,CAACC,OAAO,CAAC,CAAC;IAC5B;IAEA,MAAMC,SAAS,GAAG;MAChBC,MAAM,EAAEP,IAAI,CAACQ,GAAG,CAACC,SAAS,IAAIX,UAAU,CAACW,SAAS,CAACC,KAAK,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACxEC,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,SAAS;QAChBb,IAAI,EAAEA,IAAI,CAACQ,GAAG,CAACC,SAAS,IAAIA,SAAS,CAACK,MAAM,CAAC;QAC7CC,eAAe,EAAE;MACnB,CAAC;IAEL,CAAC;IAED,MAAMC,GAAG,GAAGb,SAAS,CAACC,OAAO,CAACa,UAAU,CAAC,IAAI,CAAC;IAC9Cf,QAAQ,CAACE,OAAO,GAAG,IAAIX,KAAK,CAACuB,GAAG,EAAE;MAChCE,IAAI,EAAE,KAAK;MACXlB,IAAI,EAAEM,SAAS;MACfa,OAAO,EAAE;QACPC,MAAM,EAAE;UACNC,CAAC,EAAE;YACDH,IAAI,EAAE;UACR,CAAC;UACDI,CAAC,EAAE;YACDC,WAAW,EAAE;UACf;QACF;MACF;IACF,CAAC,CAAC;IAEF,OAAO,MAAM;MACX,IAAIrB,QAAQ,CAACE,OAAO,EAAE;QACpBF,QAAQ,CAACE,OAAO,CAACC,OAAO,CAAC,CAAC;MAC5B;IACF,CAAC;EACH,CAAC,EAAE,CAACL,IAAI,CAAC,CAAC;EAEV,oBAAOJ,OAAA;IAAQ4B,GAAG,EAAErB,SAAU;IAACsB,EAAE,EAAC,aAAa;IAACC,SAAS,EAAC;EAAY;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAS,CAAC;AAClF,CAAC;AAAC7B,EAAA,CA5CIF,WAAW;AAAAgC,EAAA,GAAXhC,WAAW;AA8CjB,eAAeA,WAAW;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}